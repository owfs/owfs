'\"
'\" The definitions below are for supplemental macros used in Tcl/Tk
'\" manual entries.
'\"
'\" .AP type name in/out ?indent?
'\"	Start paragraph describing an argument to a library procedure.
'\"	type is type of argument (int, etc.), in/out is either "in", "out",
'\"	or "in/out" to describe whether procedure reads or modifies arg,
'\"	and indent is equivalent to second arg of .IP (shouldn't ever be
'\"	needed;  use .AS below instead)
'\"
'\" .AS ?type? ?name?
'\"	Give maximum sizes of arguments for setting tab stops.  Type and
'\"	name are examples of largest possible arguments that will be passed
'\"	to .AP later.  If args are omitted, default tab stops are used.
'\"
'\" .BS
'\"	Start box enclosure.  From here until next .BE, everything will be
'\"	enclosed in one large box.
'\"
'\" .BE
'\"	End of box enclosure.
'\"
'\" .CS
'\"	Begin code excerpt.
'\"
'\" .CE
'\"	End code excerpt.
'\"
'\" .VS ?br?
'\"	Begin vertical sidebar, for use in marking newly-changed parts
'\"	of man pages.  If an argument is present, then a line break is
'\"	forced before starting the sidebar.
'\"
'\" .VE
'\"	End of vertical sidebar.
'\"
'\" .DS
'\"	Begin an indented unfilled display.
'\"
'\" .DE
'\"	End of indented unfilled display.
'\"
'\" .SO
'\"	Start of list of standard options for a Tk widget.  The
'\"	options follow on successive lines, in four columns separated
'\"	by tabs.
'\"
'\" .SE
'\"	End of list of standard options for a Tk widget.
'\"
'\" .OP cmdName dbName dbClass
'\"	Start of description of a specific option.  cmdName gives the
'\"	option's name as specified in the class command, dbName gives
'\"	the option's name in the option database, and dbClass gives
'\"	the option's class in the option database.
'\"
'\" .UL arg1 arg2
'\"	Print arg1 underlined, then print arg2 normally.
'\"
'\"	# Set up traps and other miscellaneous stuff for Tcl/Tk man pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
'\"	# Start an argument description
.de AP
.ie !'\\$4'' .TP \\$4
.el \{\
.   ie !'\\$2'' .TP \\n()Cu
.   el          .TP 15
.\}
.ie !'\\$3'' \{\
.ta \\n()Au \\n()Bu
\&\\$1	\\fI\\$2\\fP	(\\$3)
.\".b
.\}
.el \{\
.br
.ie !'\\$2'' \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
'\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !'\\$1'' .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !'\\$2'' .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
'\"	# BS - start boxed text
'\"	# ^y = starting y location
'\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
'\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.fi
.br
.nr ^b 0
..
'\"	# VS - start vertical sidebar
'\"	# ^Y = starting y location
'\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.if !'\\$1'' .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
'\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
'\"	# Special macro to handle page bottom:  finish off current
'\"	# box/sidebar if in box/sidebar mode, then invoked standard
'\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
'\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
'\"	# DE - end display
.de DE
.fi
.RE
.sp
..
'\"	# SO - start of list of standard options
.de SO
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 4c 8c 12c
.ft B
..
'\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See the \\fBoptions\\fR manual entry for details on the standard options.
..
'\"	# OP - start of full description for a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
'\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
'\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.de UL
\\$1\l'|0\(ul'\\$2
..
.TH "Owtcl" TCL "20/January/2005" "Tcl"
.HS table tk
.BS
.SH NAME
Owtcl \- OWFS library access commands for Tcl
.SH SYNOPSIS
\fBpackage \fBrequire \fBow
.sp
\fBow\fI \fIoption \fR?\fIarg ...\fR?
.sp
\fB::OW::init\fI \fIinterface \fR?\fIinterface ...\fR? \fR?\fIarg ...\fR?
.br
\fB::OW::finish
.br
\fB::OW::isconnect
.br
\fB::OW::get\fI \fR?\fIpath\fR? \fR?\fIarg ...\fR?
.br
\fB::OW::put\fI \fIpath \fR?\fIvalue\fR?
.br
\fB::OW::isdirectory\fI \fIpath
.br
\fB::OW::isdir\fI \fIpath
.br
\fB::OW::exists\fI \fIpath
\fR
.SH DESCRIPTION
.so mann/description.nso
.SS owtcl
.B owtcl (3)
is a Tcl extension that provides an interface to OWFS. The underlying interface to the 1-wire bus is identical to 
.B owfs (1)
(filesystem view) and 
.B owhttpd (1) 
web server interface. Only the top
layer has been modified to return native Tcl data.
.SH COMMANDS
Performs one of several operations, depending on \fIoption\fR.
The legal \fIoption\fRs (which may be abbreviated) are:
.TP
\fBow open \fIarg ...\fR
Connect to 1-wire adapter or \fIowserver\fR. \fIarg ...\fR defines a way of
connection to the 1-wire bus.
.br
The full set of initialization args is extensive. They correspond roughly to the command line args of
.B owfs (1)
.B owhttpd (1)
and
.B owftpd (1)

.TP
\fBow close
Close connection to 1-wire bus or owserver.

.TP
\fBow version\fR ?\fI-list\fR?
Return version of the owtcl and owlib/

.TP
\fBow opened
Return 1 if connected to 1-wire adapter or \fIowserver\fR, otherwise 0.

.TP
\fBow error\fR \fIlevel\fR \fIvalue\fR
Set debug options. See
.B owfs (5)

.TP
\fBow error\fR \fIprint\fR \fIvalue\fR
Set debug options. See
.B owfs (5)

.TP
\fBow get\fR \fIpath\fR \fR?\fI-list\fR?
Returns contents of OWFS directory as the list if path contains name OWFS directory.
If path is name of OWFS file, returns of contents of this file. For files *.ALL
returns a values list.


.TP
\fBow put \fIpath \fR\fIvalue\fR
Puts \fIvalue\fR in OWFS file indicated in \fIpath\fR. For files *.ALL use a value
list.

.TP
\fBow isdirectory \fIpath
If \fIpath\fR is the directory return 1. Otherwise return 0.

.TP
\fBow isdir \fIpath
Synonym of \fBow isdirectory

.TP
\fBow set \fIpath
Creates a new \fBow\fR-like command with root in the \fIpath\fR.
A new command allows options \fIget\fR, \fIput\fR, \fIisdirectory\fR, \fIisdir\fR and \fIset\fR.


.SH LOW-LEVEL COMMANDS
The following low-level commands are possible:
.TP
\fB::OW::init \fIinterface \fR?\fIinterface ...\fR? \fR?\fIarg ...\fR?
Connect to 1-wire adapter or \fIowserver\fR. \fIinterface\fR and \fIarg ...\fR defines a way of
connection to the 1-wire bus.
.br
The full set of initialization options is extensive. They correspond roughly to the command line options of
,B owfs (1)
.B owhttpd (1)
and
.B owftpd (1)

.TP
\fB::OW::finish
Close connection to 1-wire bus or owserver.

.TP
\fB::OW::isconnect
Return 1 if connected to 1-wire adapter or \fIowserver\fR, otherwise 0.

.TP
\fB::OW::get \fR?\fIpath\fR? \fR?\fI-list\fR?
Returns contents of OWFS directory as the list if path contains name OWFS directory.
If path is name of OWFS file, returns of contents of this file. For files *.ALL
returns a values list. If path is not defined, contents of root OWFS directory come
back.

.TP
\fB::OW::put \fIpath \fR?\fIvalue\fR?
Puts \fIvalue\fR in OWFS file indicated in \fIpath\fR. For files *.ALL use a value
list. If /fIvalue\fR is not defined, puts a empty string.

.TP
\fB::OW::isdirectory \fIpath
If \fIpath\fR is the directory - return 1. Otherwise return 0.

.TP
\fB::OW::isdir \fIpath
Synonym of \fB::OW::isdirectory

.TP
\fB::OW::exists \fIpath
If \fIpath\fR is exists - return 1. Otherwise return 0.

.SH EXAMPLE
.CS
package require ow

ow open \-d /dev/ttyS0 \-t 60

set save_templow [ow get /28.86BF80000000/templow]
ow put /28.86BF80000000/templow 10

set room_sensor [ow set /28.86BF80000000]
$room_sensor put temphigh 50

set room_temp [$room_sensor set temperature]
set current_temp [$room_temp get]
.CE

.SH SEE ALSO
.so mann/seealso.nso
.SH AVAILABILITY
http://www.owfs.org
.SH AUTHOR
Serg Oskin (serg@oskin.ru)
.sp

